C0 C0 FF EE       # magic number
00 13             # version 9, arch = 1 (64 bits)

00 00             # int pool count
# int pool

00 19             # string pool total size
# string pool
00  # ""
20 69 73 20 74 68 65 20 66 61 63 74 6F 72 69 61 6C 20 6F 66 20 31 35 00  # " is the factorial of 15"

00 02             # function count
# function_pool

#<main>
00 00             # number of arguments = 0
00 01             # number of local variables = 1
00 32             # code length = 50 bytes
10 01    # bipush 1        # 1
36 00    # vstore 0        # i = 1;
# <03:loop>
15 00    # vload 0         # i
10 10    # bipush 16       # 16
A1 00 06 # if_icmplt +6    # if (i < 16) goto <04:body>
A7 00 1D # goto +29        # goto <05:exit>
# <04:body>
15 00    # vload 0         # i
B8 00 01 # invokestatic 1  # factorial(i)
B7 00 00 # invokenative 0  # printint(factorial(i))
57       # pop             # (ignore result)
14 00 00 # aldc 0          # s[0] = ""
B7 00 01 # invokenative 1  # println("")
57       # pop             # (ignore result)
15 00    # vload 0         # i
10 01    # bipush 1        # 1
60       # iadd            # 
36 00    # vstore 0        # i += 1;
A7 FF DF # goto -33        # goto <03:loop>
# <05:exit>
14 00 01 # aldc 1          # s[1] = " is the factorial of 15"
B7 00 01 # invokenative 1  # println(" is the factorial of 15")
57       # pop             # (ignore result)
10 00    # bipush 0        # 0
B0       # return          # 


#<factorial>
00 01             # number of arguments = 1
00 01             # number of local variables = 1
00 1B             # code length = 27 bytes
15 00    # vload 0         # n
10 00    # bipush 0        # 0
9F 00 06 # if_cmpeq +6     # if (n == 0) goto <00:cond_true>
A7 00 08 # goto +8         # goto <01:cond_false>
# <00:cond_true>
10 01    # bipush 1        # 1
A7 00 0E # goto +14        # goto <02:cond_end>
# <01:cond_false>
15 00    # vload 0         # n
15 00    # vload 0         # n
10 01    # bipush 1        # 1
64       # isub            # (n - 1)
B8 00 01 # invokestatic 1  # factorial((n - 1))
68       # imul            # (n * factorial((n - 1)))
# <02:cond_end>
B0       # return          # 

00 02             # native count
# native pool
00 01 00 09       # printint
00 01 00 0A       # println

